// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/client"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Merchant {
  merchantId        String             @id
  name              String
  phoneNumber       String
  location          String
  orders            Order[]
  moneyTransactions MoneyTransaction[]
  balance           Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Product {
  productId         String   @id
  name              String
  purchasedPrice    Float?
  wholesalePrice    Float
  retailPrice       Float
  piecesPerQuantity Int
  purchasedQuantity Int
  expiryDate        DateTime
  currentQuantity   Int
  inShopQuantity    Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  orderedProduct OrderedProduct[]

  @@map("product")
}

model Order {
  orderId String @id

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)

  orderedProducts OrderedProduct[]
  orderDate       DateTime         @default(now())

  billId            String
  billGeneratedById String
  billGeneratedBy   Employee @relation(fields: [billGeneratedById], references: [employeeId], onDelete: Cascade)

  paymentByUPI   Int @default(0)
  paymentByCash  Int @default(0)
  paymentByCheck Int @default(0)

  accountType String @default("None")

  totalBill Int
  totalPaid Int
}

model OrderedProduct {
  orderedProductId String @id @default(uuid())
  name             String
  quantity         Int
  soldPrice        Float
  productId        String
  orderId          String
  order            Order  @relation(fields: [orderId], references: [orderId], onDelete: Cascade)

  product Product @relation(fields: [productId], references: [productId])

  @@map("orderedProduct")
}

model Expense {
  expenseId   String   @id @default(uuid())
  category    String
  amount      Float
  expendDate  DateTime
  createdAt   DateTime @default(now())
  description String
}

model Employee {
  employeeId       String             @id
  name             String
  phoneNumber      String
  role             String
  location         String
  orders           Order[]
  moneyTransaction MoneyTransaction[]
  joinedDate       DateTime
}

model MoneyTransaction {
  transactionId String @id

  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [merchantId], onDelete: Cascade)

  paidToId String
  paidTo   Employee @relation(fields: [paidToId], references: [employeeId], onDelete: Cascade)

  paymentType String @default("Add")

  paymentByUPI   Int    @default(0)
  paymentByCash  Int    @default(0)
  paymentByCheck Int    @default(0)
  accountType    String @default("None")

  transactionDate DateTime @default(now())

  description String?

  totalAmount Int
}
